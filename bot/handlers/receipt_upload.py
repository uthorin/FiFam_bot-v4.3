from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from bot.keyboards.entry import post_entry_keyboard
from bot.states import ReceiptStates
from config import load_config
config = load_config()
from database.receipt import add_receipt, add_receipt_item
from uuid import uuid4
import os

from bot.utils.ocr.google_ocr import run_ocr_google
from bot.utils.extractors.gpt import ReceiptItemExtractorGPT
from bot.utils.parsers.regex_parser import extract_items_multiline

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def confirmation_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_receipt")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_receipt")]
    ])

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏–ª–∏ PDF
@router.message(ReceiptStates.waiting_for_photo_or_document, F.photo | F.document)
async def handle_receipt_upload(message: Message, state: FSMContext):
    file = message.photo[-1] if message.photo else message.document
    ext = ".jpg" if message.photo else ".pdf"

    # üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å. 5 –ú–ë)
    if file.file_size > 5 * 1024 * 1024:
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 5 –ú–ë.")
        return

    # üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME-—Ç–∏–ø–∞ (–¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
    if message.document:
        allowed_mime = ["application/pdf"]
        if file.mime_type not in allowed_mime:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å PDF –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
            return

    file_name = f"receipt_{uuid4()}{ext}"
    temp_path = f"./tmp/{file_name}"
    os.makedirs("./tmp", exist_ok=True)

    await message.bot.download(file, destination=temp_path)

    try:
        ocr_text = run_ocr_google(temp_path)

        gpt = ReceiptItemExtractorGPT(api_key=config.openai_api_key)
        items = gpt.extract_items(ocr_text)

        # –ï—Å–ª–∏ GPT –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è ‚Äî fallback –Ω–∞ regex
        if not items:
            items = extract_items_multiline(ocr_text)

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        print(f"[ERROR] Receipt OCR/Parsing failed: {e}")
        items = []

    finally:
        # üîê –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞
        try:
            os.remove(temp_path)
        except Exception as e:
            print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")

    if not items:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–∫—É–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(receipt_items=items)
    await state.set_state(ReceiptStates.waiting_for_user_confirm)

    preview = "\n".join([
        f"- {item['name']} ‚Äî {item['price']} ({item.get('category', '‚ùî')})"
        for item in items
    ])

    await message.answer(
        f"üßæ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏:\n\n{preview}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ?",
        reply_markup=confirmation_keyboard()
    )

    

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.callback_query(F.data == "confirm_receipt")
async def confirm_receipt(callback: CallbackQuery, state: FSMContext, **data):
    fsm_data = await state.get_data()
    items = fsm_data.get("receipt_items")
    db = data.get("db")
    if not db:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return
    user_id = callback.from_user.id

    if not items:
        await callback.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return

    total = sum(item["price"] for item in items)
    receipt_id = await add_receipt(db, user_id=user_id, total=total)

    for item in items:
        await add_receipt_item(db, receipt_id, item["name"], item["category"], item["price"])

    await callback.message.edit_text("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    await state.clear()
    await callback.message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=post_entry_keyboard())

# –û—Ç–º–µ–Ω–∞
@router.callback_query(F.data == "cancel_receipt")
async def cancel_receipt(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@router.message(F.photo | F.document)
async def process_uploaded_file(message: Message, state: FSMContext):
    current_state = await state.get_state()

    # –ï—Å–ª–∏ FSM —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî –ø—É—Å—Ç—å —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–π —Ö–µ–Ω–¥–ª–µ—Ä
    if current_state == ReceiptStates.waiting_for_photo_or_document.state:
        return  # –ù–µ –º–µ—à–∞–µ–º FSM-—Ö–µ–Ω–¥–ª–µ—Ä—É

    # –ò–Ω–∞—á–µ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª "–≤–Ω–µ –∫–æ–º–∞–Ω–¥—ã"
    await state.set_state(ReceiptStates.waiting_for_photo_or_document)
    await message.answer("üì• –ß–µ–∫ –ø—Ä–∏–Ω—è—Ç! –†–∞—Å–ø–æ–∑–Ω–∞—é –¥–∞–Ω–Ω—ã–µ...")

    # –ü—Ä–æ–∫–∏–Ω—å –≤ FSM –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ—Ç–∫—É –∏–ª–∏ –≤—Ä–µ–º—è)
    # await state.update_data(source="auto")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π –∏ –≤—ã–∑–æ–≤–∏ –≤—Ä—É—á–Ω—É—é —Ç–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    from .receipt_upload import handle_receipt_upload
    await handle_receipt_upload(message, state)

