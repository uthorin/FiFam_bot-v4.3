import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from datetime import date
from bot.handlers.analysis import start_analysis_base
from bot.categories import income_categories, expense_categories

from bot.states import EntryStates
from bot.keyboards.entry import (
    type_keyboard,
    category_keyboard,
    date_choice_keyboard,
    confirm_keyboard,
    back_keyboard,
    post_entry_keyboard,
)
from database.db import add_transaction
from utils.type_mapping import to_internal_type, to_display_type

router = Router()

async def start_entry_flow(message: Message, state: FSMContext, entry_type: str):
    internal_type = to_internal_type(entry_type)
    await state.set_state(EntryStates.choosing_amount)
    await state.update_data(type=internal_type)
    await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É:")

@router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def start_entry_from_text(message: Message, state: FSMContext):
    await state.set_state(EntryStates.choosing_type)
    await message.answer("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=type_keyboard())

@router.callback_query(F.data.in_(["–¥–æ—Ö–æ–¥", "—Ä–∞—Å—Ö–æ–¥"]))
async def choose_type(callback: CallbackQuery, state: FSMContext):
    entry_type = callback.data
    internal_type = to_internal_type(callback.data)
    await state.update_data(type=internal_type)
    await state.set_state(EntryStates.choosing_amount)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(f"–í–≤–µ–¥–∏ —Å—É–º–º—É {entry_type.lower()}–∞:")
    await callback.answer()

@router.message(EntryStates.choosing_amount)
async def choose_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
    except ValueError:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return

    await state.update_data(amount=amount)
    await state.set_state(EntryStates.choosing_category)
    fsm_data = await state.get_data()
    display_type = to_display_type(fsm_data['type'])
    await message.answer(
        f"–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {display_type}–∞:",
        reply_markup=category_keyboard(fsm_data['type'])
    )

@router.callback_query(EntryStates.choosing_category)
async def choose_category(callback: CallbackQuery, state: FSMContext):
    fsm_data = await state.get_data()
    entry_type = fsm_data.get("type")  # "income" –∏–ª–∏ "expense"

    valid = income_categories if entry_type == "income" else expense_categories

    # üí° –í–∞–ª–∏–¥–∞—Ü–∏—è
    if callback.data not in valid:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
        return

    await state.update_data(category=callback.data)
    await state.set_state(EntryStates.choosing_date)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–ó–∞ –∫–∞–∫—É—é –¥–∞—Ç—É?", reply_markup=date_choice_keyboard())
    await callback.answer()

@router.callback_query(EntryStates.choosing_date, F.data == "—Å–µ–≥–æ–¥–Ω—è")
async def choose_today(callback: CallbackQuery, state: FSMContext):
    await state.update_data(date=date.today())
    await callback.message.edit_reply_markup(reply_markup=None)
    await show_confirm(callback.message, state)
    await state.set_state(EntryStates.confirming)
    await callback.answer()

@router.callback_query(EntryStates.choosing_date, F.data == "–¥—Ä—É–≥–∞—è")
async def choose_custom_date(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=await SimpleCalendar().start_calendar())
    await callback.answer()

@router.callback_query(SimpleCalendarCallback.filter(), EntryStates.choosing_date)
async def process_calendar(callback: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    selected = date(callback_data.year, callback_data.month, callback_data.day)
    await state.update_data(date=selected)
    await callback.message.edit_reply_markup(reply_markup=None)
    await show_confirm(callback.message, state)
    await state.set_state(EntryStates.confirming)
    await callback.answer()

async def show_confirm(message: Message, state: FSMContext):
    fsm_data = await state.get_data()
    display_type = to_display_type(fsm_data['type'])
    text = (
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n\n"
        f"–¢–∏–ø: {display_type.capitalize()}\n"
        f"–°—É–º–º–∞: {fsm_data['amount']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {fsm_data['category']}\n"
        f"–î–∞—Ç–∞: {fsm_data['date']}"
    )
    await message.answer(text, reply_markup=confirm_keyboard())

@router.callback_query(F.data == "confirm_entry")
async def confirm_entry(callback: CallbackQuery, state: FSMContext, **data):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
        data (dict): –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    """
    fsm_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    if not isinstance(fsm_data.get("amount"), (int, float)) or fsm_data["amount"] <= 0:
        await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    if not isinstance(fsm_data.get("date"), date):
        await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    try:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await add_transaction(
            data['db'],
            user_id=callback.from_user.id,
            type_=fsm_data["type"],
            amount=fsm_data["amount"],
            category=fsm_data["category"],
            date_=fsm_data["date"],
            description=""
        )

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        display_type = to_display_type(fsm_data["type"])
        text = (
            "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–¢–∏–ø: {display_type.capitalize()}\n"
            f"–°—É–º–º–∞: {fsm_data['amount']}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {fsm_data['category']}\n"
            f"–î–∞—Ç–∞: {fsm_data['date'].strftime('%d.%m.%Y')}"
        )
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(text, reply_markup=post_entry_keyboard())

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ callback-–∑–∞–ø—Ä–æ—Å–∞
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "cancel_entry")
async def cancel_entry(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!", reply_markup=post_entry_keyboard())
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "back_to_category")
async def back_to_category(callback: CallbackQuery, state: FSMContext):
    fsm_data = await state.get_data()
    display_type = to_display_type(fsm_data['type'])
    await state.set_state(EntryStates.choosing_category)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        f"–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {display_type}–∞:",
        reply_markup=category_keyboard(fsm_data['type'])
    )
    await callback.answer()

@router.callback_query(F.data == "add_another")
async def handle_add_another(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EntryStates.choosing_type)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=type_keyboard())
    await callback.answer()

@router.callback_query(F.data == "start_stats")
async def handle_go_stats(callback: CallbackQuery, state: FSMContext):
    from bot.handlers.statistics import cmd_statistics
    await state.clear()
    await callback.message.edit_reply_markup(reply_markup=None)
    await cmd_statistics(callback.message)
    await callback.answer()

@router.callback_query(F.data == "start_menu")
async def handle_go_menu(callback: CallbackQuery, state: FSMContext, **data):
    from bot.handlers.common import cmd_start
    await state.clear()
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("üëã –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")  # –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å cmd_start, –µ—Å–ª–∏ —É–±—Ä–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
    await cmd_start(callback.message, state, **data)
    await state.clear()
    await callback.answer()

@router.message(F.data == "crash")
async def crash(msg: Message):
    1 / 0  # –û—à–∏–±–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ Sentry

@router.callback_query(F.data == "start_analysis")
async def start_analysis_callback(callback: CallbackQuery, state: FSMContext, **data):
    await callback.answer("üîÑ –ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑...")
    user_id = callback.from_user.id
    await start_analysis_base(user_id, callback, state, **data)





